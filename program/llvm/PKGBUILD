# description	: Low Level Virtual Machine
# depends	: cmake ninja libffi python zlib ncurses zstd perl libxml2 
# depends	: binutils libunwind

pkgname=llvm
pkgver=20.1.8
_version=20.1.8
pkgrel=1
options=(!lto)
source=(https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/llvm-$pkgver.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-${_version}.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-third-party-${_version}.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/clang-$pkgver.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/compiler-rt-$pkgver.src.tar.xz
        llvm-config.h)
noextract=(llvm-cmake-${_version}.src.tar.xz llvm-third-party-${_version}.src.tar.xz clang-$pkgver.src.tar.xz compiler-rt-$pkgver.src.tar.xz)

build() {
	cd $pkgname-$pkgver.src

    if [ "$OPTFLAGS" = "yes" ];then
        export CFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH -fno-lto $DEBUGFLAGS"
        export CXXFLAGS="$CFLAGS"
        export FFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH -fno-lto $DEBUGFLAGS"
        export FCFLAGS="$FFLAGS"
    fi

    tar -xf ../llvm-cmake-${_version}.src.tar.xz                 &&
    tar -xf ../llvm-third-party-${_version}.src.tar.xz           &&
    sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-${_version}.src@" \
        -i CMakeLists.txt                                        &&
    sed "/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-${_version}.src@" \
        -i cmake/modules/HandleLLVMOptions.cmake

    tar -xf ../clang-$pkgver.src.tar.xz -C tools &&
    mv tools/clang-$pkgver.src tools/clang

    tar -xf ../compiler-rt-$pkgver.src.tar.xz -C projects    &&
    mv projects/compiler-rt-$pkgver.src projects/compiler-rt &&
    #sed '/^set(LLVM_COMMON_CMAKE_UTILS/d'                   \
    #    -i projects/compiler-rt/CMakeLists.txt

    # Fix python 
    grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

    sed 's/utility/tool/' -i utils/FileCheck/CMakeLists.txt

    sed '/CLANG_CMAKE_DIR/a set(CLANG_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")' -i tools/clang/cmake/modules/ClangConfig.cmake.in

    sed '/LLVM_LIBDIR_SUFFIX/a set(LLVM_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")' -i cmake/modules/LLVMConfig.cmake.in

    CC="gcc" CXX="g++" \
    cmake -B build \
        -D CMAKE_INSTALL_PREFIX=/usr \
        -D CMAKE_SKIP_INSTALL_RPATH=ON \
        -D LLVM_ENABLE_FFI=ON \
        -D CMAKE_BUILD_TYPE=Release \
        -D LLVM_BUILD_LLVM_DYLIB=ON \
        -D LLVM_LINK_LLVM_DYLIB=ON \
        -D LLVM_ENABLE_RTTI=ON \
        -D LLVM_TARGETS_TO_BUILD="X86;host;AMDGPU" \
        -D LLVM_BINUTILS_INCDIR=/usr/include \
        -D LLVM_INCLUDE_BENCHMARKS=OFF \
        -D CLANG_DEFAULT_PIE_ON_LINUX=ON \
        -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang \
        -Wno-dev -G Ninja
    ninja -C build
    DESTDIR="$pkgdir" ninja install -C build 

    cp build/bin/FileCheck "$pkgdir"/usr/bin

    mkdir -pv "$pkgdir"/etc/clang &&
    for i in clang clang++; do
        echo -fstack-protector-strong > "$pkgdir"/etc/clang/$i.cfg
    done

	# multilib stub
	mv "$pkgdir"/usr/include/llvm/Config/llvm-config.h \
	   "$pkgdir"/usr/include/llvm/Config/llvm-config-64.h
	cp "$srcdir"/llvm-config.h \
	   "$pkgdir"/usr/include/llvm/Config/llvm-config.h	
}