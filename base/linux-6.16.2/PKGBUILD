# description	: Linux Kernel
# depends	: initramfs linux-firmware openssl cpio bc
# depends	: elfutils libnvme harfbuzz

pkgname=linux-6.16.2
pkgver=6.16.2
pkgrel=1
options=(!strip)
_srcvers=$pkgver.arch1
_srctag=v${_srcvers%.*}-${_srcvers##*.}
source=(https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${pkgver%.0}.tar.xz
        https://github.com/archlinux/linux/releases/download/$_srctag/linux-$_srctag.patch.zst
        novector.patch configarch)

export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"


build() {
    zstd -d linux-$_srctag.patch.zst

    cd ${pkgname%-*}-${pkgver%.0}

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        src="${src%.zst}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch -Np1 < "../$src"
    done


    cp "$srcdir"/configarch .config

	sed '/^CONFIG_LOCALVERSION=/d' -i .config
    echo "CONFIG_LOCALVERSION=\"-LFS\""  >> .config

    # clear EXTRAVERSION
    sed 's/-arch1//' -i Makefile

    if [ "$MMARCH" = "native" ] ;then
        sed -i "s/-march=x86-64 -mtune=generic/-march=$MMARCH  -mtune=generic/" arch/x86/Makefile
        sed -i "s/-Ctarget-cpu=x86-64 -Ztune-cpu=generic/-Ctarget-cpu=$MMARCH/" arch/x86/Makefile
    fi

    sed -i '262i $(info KBUILD_CFLAGS = $(KBUILD_CFLAGS))' arch/x86/Makefile

    yes "" | make oldconfig
    make all

    kernver=${pkgver}$(grep CONFIG_LOCALVERSION= .config | cut -d '"' -f2)
    local modulesdir="$pkgdir/usr/lib/modules/$kernver"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgname" | install -Dm644 /dev/stdin "$modulesdir/name"

    echo "Installing modules..."
    ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist modules_install  # Suppress depmod

    mkdir -p "$pkgdir"/boot
    cp  arch/x86/boot/bzImage "$pkgdir"/boot/vmlinuz-$kernver
    cp .config "$pkgdir"/boot/config-$kernver

    rm -f "$modulesdir"/vmlinuz

    # remove build link
    rm "$modulesdir"/build

    local builddir="$pkgdir/usr/lib/modules/$kernver/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        vmlinux # tools/bpf/bpftool/vmlinux.h
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts
    ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    #install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    STRIP_SHARED='--strip-unneeded'
    STRIP_STATIC='--strip-debug'
    STRIP_BINARIES='--strip-all'

    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
        application/x-sharedlib\;*)      # Libraries (.so)
            strip -v $STRIP_SHARED "$file" ;;
        application/x-archive\;*)        # Libraries (.a)
            strip -v $STRIP_STATIC "$file" ;;
        application/x-executable\;*)     # Binaries
            strip -v $STRIP_BINARIES "$file" ;;
        application/x-pie-executable\;*) # Relocatable binaries
            strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgname"

    echo $kernver > "$pkgdir"/usr/lib/modules/KERNELVERSION
}